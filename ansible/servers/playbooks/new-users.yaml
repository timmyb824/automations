- name: Create new users
  hosts: all
  gather_facts: false

  vars:
    - user: "{{ lookup('env','ssh_user') }}"
    - remote_user: "{{ lookup('env','ssh_remote_user') }}"
  # created with:
  # python -c 'import crypt; print(crypt.crypt("password", "45678Hello23453SomeSalt"))'
  # above command requires the PassLib library: pip install passlib
  # will throw a wanrning that password must be encrypted not hashed
    - SSH_PASSWORD_HASHED: "{{ lookup('env','SSH_PASSWORD_HASHED') }}"

  tasks:
- name: Create a login user
  become: true
  ansible.builtin.user:
    name: "{{ users }}"
    password: "{{ SSH_PASSWORD_HASHED }}"
    groups:
      - sudo
    shell: /bin/bash
    state: present
  loop:
    - "{{ ssh_user }}"
    - "{{ ssh_remote_user }}"
  loop_control:
    loop_var: users

- name: Add public key to authorized_keys
  become: true
  ansible.posix.authorized_key:
    user: "{{ users }}"
    state: present
    key: "{{ ssh_key }}"
  loop:
    - "{{ ssh_user }}"
    - "{{ ssh_remote_user }}"
  loop_control:
    loop_var: users

- name: Check if sudoers file exists
  when: ssh_remote_user is defined
  stat:
    path: /etc/sudoers.d/{{ ssh_remote_user }}
  register: sudoers_file

- name: Create sudoers file
  become: true
  when: ssh_remote_user is defined and not sudoers_file.stat.exists
  ansible.builtin.file:
    path: /etc/sudoers.d/{{ ssh_remote_user }}
    state: touch
    mode: 0644

- name: Add remote user to sudoers file
  become: true
  when: ssh_remote_user is defined and not sudoers_file.stat.exists
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/{{ ssh_remote_user }}
    regexp: '^{{ ssh_remote_user }}'
    line: '{{ ssh_remote_user }} ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
